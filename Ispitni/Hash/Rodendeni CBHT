package Hashes;


import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

class MapEntry<K extends Comparable<K>, E> implements Comparable<K> {

    // Each MapEntry object is a pair consisting of a key (a Comparable
    // object) and a value (an arbitrary object).
    K key;
    E value;

    public MapEntry(K key, E val) {
        this.key = key;
        this.value = val;
    }

    public int compareTo(K that) {
        // Compare this map entry to that map entry.
        @SuppressWarnings("unchecked")
        MapEntry<K, E> other = (MapEntry<K, E>) that;
        return this.key.compareTo(other.key);
    }

    public String toString() {
        return "<" + key + "," + value + ">";
    }
}

class SLLNode<E> {
    protected E element;
    protected SLLNode<E> succ;

    public SLLNode(E elem, SLLNode<E> succ) {
        this.element = elem;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}

class CBHT<K extends Comparable<K>, E> {

    // An object of class CBHT is a closed-bucket hash table, containing
    // entries of class MapEntry.
    private SLLNode<MapEntry<K,E>>[] buckets;

    @SuppressWarnings("unchecked")
    public CBHT(int m) {
        // Construct an empty CBHT with m buckets.
        buckets = (SLLNode<MapEntry<K,E>>[]) new SLLNode[m];
    }

    private int hash(K key) {
        // Translate key to an index of the array buckets.
        return Math.abs(key.hashCode()) % buckets.length;
    }

    public SLLNode<MapEntry<K,E>> search(K targetKey) {
        // Find which if any node of this CBHT contains an entry whose key is
        // equal
        // to targetKey. Return a link to that node (or null if there is none).
        int b = hash(targetKey);
        for (SLLNode<MapEntry<K,E>> curr = buckets[b]; curr != null; curr = curr.succ) {
            if (targetKey.equals(((MapEntry<K, E>) curr.element).key))
                return curr;
        }
        return null;
    }

    public void insert(K key, E val) {		// Insert the entry <key, val> into this CBHT.
        MapEntry<K, E> newEntry = new MapEntry<K, E>(key, val);
        int b = hash(key);
        for (SLLNode<MapEntry<K,E>> curr = buckets[b]; curr != null; curr = curr.succ) {
            if (key.equals(((MapEntry<K, E>) curr.element).key)) {
                // Make newEntry replace the existing entry ...
                curr.element = newEntry;
                return;
            }
        }
        // Insert newEntry at the front of the 1WLL in bucket b ...
        buckets[b] = new SLLNode<MapEntry<K,E>>(newEntry, buckets[b]);
    }

    public void delete(K key) {
        // Delete the entry (if any) whose key is equal to key from this CBHT.
        int b = hash(key);
        for (SLLNode<MapEntry<K,E>> pred = null, curr = buckets[b]; curr != null; pred = curr, curr = curr.succ) {
            if (key.equals(((MapEntry<K,E>) curr.element).key)) {
                if (pred == null)
                    buckets[b] = curr.succ;
                else
                    pred.succ = curr.succ;
                return;
            }
        }
    }

    public String toString() {
        String temp = "";
        for (int i = 0; i < buckets.length; i++) {
            temp += i + ":";
            for (SLLNode<MapEntry<K,E>> curr = buckets[i]; curr != null; curr = curr.succ) {
                temp += curr.element.toString() + " ";
            }
            temp += "\n";
        }
        return temp;
    }

}

class Covek {
    String name;
    String rodenden;

    public Covek(String name, String rodenden) {
        this.name = name;
        this.rodenden = rodenden;
    }

    public int polni_godini(int vnesena_godina) {
        return vnesena_godina - Integer.parseInt(rodenden.split("/")[2]);
    }

    public String getDate() {
        return rodenden.substring(0, 5);
    }

    @Override
    public String toString() {
        return name;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

public class Rodendeni {
    /*
    3
    Magdalena Kostoska 15/05/1982
    Hristina Mihajloska 30/05/1984
    Ilinka Ivanoska 15/05/1986
    15/05/2016
    */

    /*
    Ilinka Ivanoska 30
    Magdalena Kostoska 34
    */
    public static void main(String[] args) {
        int N = 3; //hardcoded
        List<Covek> lugje = new ArrayList<>();
        CBHT<String, List<Covek>> rodendeni = new CBHT<>(N * N * 2);
        lugje.add(new Covek("Magdalena Kostoska", "15/05/1982"));
        lugje.add(new Covek("Hristina Mihajlovska", "30/05/1984"));
        lugje.add(new Covek("Ilinka Ivanoska", "15/05/1986"));
        lugje.sort(Comparator.comparing(Covek::getName));
        for (Covek covek : lugje) {
            if (rodendeni.search(covek.getDate()) == null) {
                List<Covek> lista = new ArrayList<>();
                lista.add(covek);
                rodendeni.insert(covek.getDate(), lista);
            } else {
               rodendeni.search(covek.getDate()).element.value.add(covek);
            }
        }

        String input_date = "15/05/2016";
        String query = input_date.substring(0, 5);
        SLLNode<MapEntry<String, List<Covek>>> rez = rodendeni.search(query);
        if(rez !=null) {
            for (Covek covek : rez.element.value) {
                System.out.println(covek + " " + covek.polni_godini(Integer.parseInt(input_date.substring(6,10))));
            }
        }
        else{
            System.out.println("NEMA");
        }

    }
}
