/*Se zema br na igrachi iminja na igrachi i kolku broja kje se vrti krugot prvo pochnuva od napred pa od nazad se dodeka ne ostane eden igrach
[modificirana kolokviumska]
5
player1 player2 player3 player4 player5
2
player5 
*/
/*
 * N deca sedat vo krug i se igra slednava igra. Se pocnuva od deteto X i se
 * brojat deca vo nasoka na casovnikot, koga kje se dojde do brojot M, deteto
 * kaj koe sto zastanalo broenjeto ispagja od igra. Slednata runda se pocnuva
 * od deteto koe bi bilo broj M+1, megjutoa se menja nasokata na broenje.
 * Se igra N-1 rundi, se dodeka ne ostane samo edno dete. Na vlez se vnesuvaat:
 * iminjata na decata, imeto na deteto od koe pocnuva igrata vo prvata runda
 * i broevite N i M. Da se odredi koe dete pobeduva vo igrata.

 Sample input:
 5
 player1 player2 player3 player4 player5
 2

 Sample output:
 player2
*/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class DLLNode<E> {
    protected E element;
    protected DLLNode<E> pred, succ;

    public DLLNode(E elem, DLLNode<E> pred, DLLNode<E> succ) {
        this.element = elem;
        this.pred = pred;
        this.succ = succ;
    }

    @Override
    public String toString() {
        return element.toString();
    }
}

class DLL<E> {
    private DLLNode<E> first, last;

    public DLL() {
        // Construct an empty SLL
        this.first = null;
        this.last = null;
    }

    public void deleteList() {
        first = null;
        last = null;
    }

    public int length() {
        int ret;
        if (first != null) {
            DLLNode<E> tmp = first;
            ret = 1;
            while (tmp.succ != null) {
                tmp = tmp.succ;
                ret++;
            }
            return ret;
        } else
            return 0;

    }

    public DLLNode<E> find(E o) {
        if (first != null) {
            DLLNode<E> tmp = first;
            while (tmp.element != o && tmp.succ != null)
                tmp = tmp.succ;
            if (tmp.element == o) {
                return tmp;
            } else {
                System.out.println("Elementot ne postoi vo listata");
            }
        } else {
            System.out.println("Listata e prazna");
        }
        return first;
    }

    public void insertFirst(E o) {
        DLLNode<E> ins = new DLLNode<E>(o, null, first);
        if (first == null)
            last = ins;
        else
            first.pred = ins;
        first = ins;
    }

    public void insertLast(E o) {
        if (first == null)
            insertFirst(o);
        else {
            DLLNode<E> ins = new DLLNode<E>(o, last, null);
            last.succ = ins;
            last = ins;
        }
    }

    public void insertAfter(E o, DLLNode<E> after) {
        if(after==last){
            insertLast(o);
            return;
        }
        DLLNode<E> ins = new DLLNode<E>(o, after, after.succ);
        after.succ.pred = ins;
        after.succ = ins;
    }

    public void insertBefore(E o, DLLNode<E> before) {
        if(before == first){
            insertFirst(o);
            return;
        }
        DLLNode<E> ins = new DLLNode<E>(o, before.pred, before);
        before.pred.succ = ins;
        before.pred = ins;
    }

    public E deleteFirst() {
        if (first != null) {
            DLLNode<E> tmp = first;
            first = first.succ;
            if (first != null) first.pred = null;
            if (first == null)
                last = null;
            return tmp.element;
        } else
            return null;
    }

    public E deleteLast() {
        if (first != null) {
            if (first.succ == null)
                return deleteFirst();
            else {
                DLLNode<E> tmp = last;
                last = last.pred;
                last.succ = null;
                return tmp.element;
            }
        }
        // else throw Exception
        return null;
    }

    public E delete(DLLNode<E> node) {
        if(node==first){
            deleteFirst();
            return node.element;
        }
        if(node==last){
            deleteLast();
            return node.element;
        }
        node.pred.succ = node.succ;
        node.succ.pred = node.pred;
        return node.element;

    }

    @Override
    public String toString() {
        String ret = new String();
        if (first != null) {
            DLLNode<E> tmp = first;
            ret += tmp + " ";
            while (tmp.succ != null) {
                tmp = tmp.succ;
                ret += tmp + " ";
            }
        } else
            ret = "Prazna lista!!!";
        return ret;
    }

    public String toStringR() {
        String ret = new String();
        if (last != null) {
            DLLNode<E> tmp = last;
            ret += tmp + "<->";
            while (tmp.pred != null) {
                tmp = tmp.pred;
                ret += tmp + "<->";
            }
        } else
            ret = "Prazna lista!!!";
        return ret;
    }

    public DLLNode<E> getFirst() {
        return first;
    }

    public DLLNode<E> getLast() {

        return last;
    }

}

public class List {
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        DLL<String> list = new DLL<>();

        int brIgrachi = Integer.parseInt(br.readLine());
        String line = br.readLine();
        String [] parts = line.split(" ");
        int m = Integer.parseInt(br.readLine());

        for(int i=0; i<brIgrachi; i++){
            list.insertLast(parts[i]);
        }



        while (list.length() > 1){
            DLLNode<String> prvi = list.getFirst();
            int cnt = 0;
            while(cnt > m){
                cnt++;
                prvi = prvi.succ;
                if(prvi == null) prvi = list.getFirst();

            }
            DLLNode<String> del = prvi;
            prvi = prvi.succ;
            list.delete(del);
            cnt = 0;
            while(cnt > m){
                cnt++;
                cnt++;
                prvi = prvi.pred;
                if(prvi == null) prvi = list.getFirst();
            }
           del = prvi;
            prvi = prvi.succ;
            list.delete(del);
            cnt = 0;
        }

        System.out.println(list);

    }
}
