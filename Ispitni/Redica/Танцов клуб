package Aips.lani;

import java.util.NoSuchElementException;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.List;

interface Queue<E> {

    // Elementi na redicata se objekti od proizvolen tip.

    // Metodi za pristap:

    public boolean isEmpty ();
    // Vrakja true ako i samo ako redicata e prazena.

    public int size ();
    // Ja vrakja dolzinata na redicata.

    public E peek ();
    // Go vrakja elementot na vrvot t.e. pocetokot od redicata.

    // Metodi za transformacija:

    public void clear ();
    // Ja prazni redicata.

    public void enqueue (E x);
    // Go dodava x na kraj od redicata.

    public E dequeue ();
    // Go otstranuva i vrakja pochetniot element na redicata.

};

interface Stack<E> {

    // Elementi na stekot se objekti od proizvolen tip.

    // Metodi za pristap:

    public boolean isEmpty ();
    // Vrakja true ako i samo ako stekot e prazen.

    public E peek ();
    // Go vrakja elementot na vrvot od stekot.

    // Metodi za transformacija:

    public void clear ();
    // Go prazni stekot.

    public void push (E x);
    // Go dodava x na vrvot na stekot.

    public E pop ();
    // Go otstranuva i vrakja elementot shto e na vrvot na stekot.
};

class ArrayQueue<E> implements Queue<E> {

    // Redicata e pretstavena na sledniot nacin:
    // length go sodrzi brojot na elementi.
    // Ako length > 0, togash elementite na redicata se zachuvani vo elems[front...rear-1]
    // Ako rear > front, togash vo  elems[front...maxlength-1] i elems[0...rear-1]
    E[] elems;
    int length, front, rear;

    @SuppressWarnings("unchecked")
    public ArrayQueue (int maxlength) {
        elems = (E[]) new Object[maxlength];
        clear();
    }

    public boolean isEmpty () {
        // Vrakja true ako i samo ako redicata e prazena.
        return (length == 0);
    }

    public int size () {
        // Ja vrakja dolzinata na redicata.
        return length;
    }

    public E peek () {
        // Go vrakja elementot na vrvot t.e. pocetokot od redicata.
        if (length > 0)
            return elems[front];
        else
            throw new NoSuchElementException();
    }

    public void clear () {
        // Ja prazni redicata.
        length = 0;
        front = rear = 0;  // arbitrary
    }

    public void enqueue (E x) {
        // Go dodava x na kraj od redicata.
        elems[rear++] = x;
        if (rear == elems.length)  rear = 0;
        length++;
    }

    public E dequeue () {
        // Go otstranuva i vrakja pochetniot element na redicata.
        if (length > 0) {
            E frontmost = elems[front];
            elems[front++] = null;
            if (front == elems.length)  front = 0;
            length--;
            return frontmost;
        } else
            throw new NoSuchElementException();
    }
};

class ArrayStack<E> implements Stack<E> {

    // Stekot e pretstaven na sledniot nacin: 
    //depth e dlabochinata na stekot, a
    // elems[0...depth-1] se negovite elementi.
    private E[] elems;
    private int depth;

    @SuppressWarnings("unchecked")
    public ArrayStack (int maxDepth) {
        // Konstrukcija na nov, prazen stek.
        elems = (E[]) new Object[maxDepth];
        depth = 0;
    }


    public boolean isEmpty () {
        // Vrakja true ako i samo ako stekot e prazen.
        return (depth == 0);
    }


    public E peek () {
        // Go vrakja elementot na vrvot od stekot.
        if (depth == 0)
            throw new NoSuchElementException();
        return elems[depth-1];
    }


    public void clear () {
        // Go prazni stekot.
        for (int i = 0; i < depth; i++)  elems[i] = null;
        depth = 0;
    }


    public void push (E x) {
        // Go dodava x na vrvot na stekot.
        elems[depth++] = x;
    }


    public E pop () {
        // Go otstranuva i vrakja elementot shto e na vrvot na stekot.
        if (depth == 0)
            throw new NoSuchElementException();
        E topmost = elems[--depth];
        elems[depth] = null;
        return topmost;
    }
};


public class TancovKlub {


    public static String sprotiven_pol(String tancer){
        if(tancer.charAt(1) == 'M') return tancer.replace('M','Z');
        return tancer.replace('Z','M');
    }
    public static void main (String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String vlez[] = new String[100];
        vlez = br.readLine().split(" ");

        ArrayQueue<String> osnovniO = new ArrayQueue<>(vlez.length);
        ArrayQueue<String> standarniS = new ArrayQueue<>(vlez.length);
        ArrayQueue<String> latinoL = new ArrayQueue<>(vlez.length);

        int br_parovi = 0;
        for (String s : vlez) {
            if(s.charAt(0) == 'O'){
                if(!osnovniO.isEmpty()){
                    if(osnovniO.peek().charAt(1) != s.charAt(1)){
                        osnovniO.dequeue(); br_parovi+=2;
                    }
                    else osnovniO.enqueue(s);
                }
                else osnovniO.enqueue(s);

            }
            if(s.charAt(0) == 'S'){
                if(!standarniS.isEmpty()){
                    if(standarniS.peek().charAt(1) != s.charAt(1)){
                        standarniS.dequeue(); br_parovi+=2;
                    }
                    else standarniS.enqueue(s);
                }
                else standarniS.enqueue(s);

            }
            if(s.charAt(0) == 'L'){
                if(!latinoL.isEmpty()){
                    if(latinoL.peek().charAt(1) != s.charAt(1)){
                        latinoL.dequeue(); br_parovi+=2;
                    }
                    else latinoL.enqueue(s);
                }
                else latinoL.enqueue(s);
            }
        }

        System.out.println(vlez.length - br_parovi);
        while(!latinoL.isEmpty()){
            String tancer= latinoL.dequeue();
            System.out.print(sprotiven_pol(tancer) + " ");
        }
        while(!standarniS.isEmpty()){
            String tancer= standarniS.dequeue();
            System.out.print(sprotiven_pol(tancer) + " ");
        }
        while(!osnovniO.isEmpty()){
            String tancer= osnovniO.dequeue();
            System.out.print(sprotiven_pol(tancer) + " ");
        }
    }
}
