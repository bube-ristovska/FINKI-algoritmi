package lab5;
import java.io.*;
import java.util.NoSuchElementException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

interface Queue<E> {
    // Elementi na redicata se objekti od proizvolen tip.
    // Metodi za pristap:
    public boolean isEmpty();
    // Vrakja true ako i samo ako redicata e prazena.

    public int size();
    // Ja vrakja dolzinata na redicata.

    public E peek();
    // Go vrakja elementot na vrvot t.e. pocetokot od redicata.

    // Metodi za transformacija:

    public void clear();
    // Ja prazni redicata.

    public void enqueue(E x);
    // Go dodava x na kraj od redicata.

    public E dequeue();
    // Go otstranuva i vrakja pochetniot element na redicata.
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * @author Aleksandar
 */
// Java Program to check if a queue
// of first n natural number can
// be sorted using a stack



class ArrayQueue<E> {
    // Redicata e pretstavena na sledniot nacin:
    // length go sodrzi brojot na elementi.
    // Ako length > 0, togash elementite na redicata se zachuvani vo elems[front...rear-1]
    // Ako rear > front, togash vo  elems[front...maxlength-1] i elems[0...rear-1]
    E[] elems;
    int length, front, rear;

    // Konstruktor ...

    @SuppressWarnings("unchecked")
    public ArrayQueue(int maxlength) {
        elems = (E[]) new Object[maxlength];
        clear();
    }

    public boolean isEmpty() {
        // Vrakja true ako i samo ako redicata e prazena.
        return (length == 0);
    }

    public int size() {
        // Ja vrakja dolzinata na redicata.
        return length;
    }

    public E peek() {
        // Go vrakja elementot na vrvot t.e. pocetokot od redicata.
        if (length > 0)
            return elems[front];
        else
            throw new NoSuchElementException();
    }

    public void clear() {
        // Ja prazni redicata.
        length = 0;
        front = rear = 0;  // arbitrary
    }

    public void enqueue(E x) {
        // Go dodava x na kraj od redicata.
        if (length == elems.length)
            throw new NoSuchElementException();
        elems[rear++] = x;
        if (rear == elems.length) rear = 0;
        length++;
    }

    public E dequeue() {
        // Go otstranuva i vrakja pochetniot element na redicata.
        if (length > 0) {
            E frontmost = elems[front];
            elems[front++] = null;
            if (front == elems.length) front = 0;
            length--;
            return frontmost;
        } else
            throw new NoSuchElementException();
    }
}


class Covek{
    String name;
    boolean licna;
    boolean pasos;
    boolean vozacka;

    public Covek(String name, int licna, int pasos, int vozacka) {
        this.name = name;
        this.licna = licna == 1;
        this.pasos = pasos == 1;
        this.vozacka = vozacka == 1;
    }
}
public class MVR {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = Integer.parseInt(scanner.nextLine());
        List<Covek> lugje = new ArrayList<>();
        String name;

        ArrayQueue<Covek> licni = new ArrayQueue<>(N);
        ArrayQueue<Covek> pasos = new ArrayQueue<>(N);
        ArrayQueue<Covek> vozacka = new ArrayQueue<>(N);

        for (int i = 0; i < 5; i++) {
            name = scanner.nextLine();
            int l = Integer.parseInt(scanner.nextLine());
            int p = Integer.parseInt(scanner.nextLine());
            int v = Integer.parseInt(scanner.nextLine());
            Covek covek = new Covek(name, l, p , v);
            lugje.add(covek);
            //sostojba 1
            if(covek.licna){
                licni.enqueue(covek);
            } else if (covek.pasos) {
                pasos.enqueue(covek);
            } else if (covek.vozacka) {
                vozacka.enqueue(covek);
            }

        }


        while (!licni.isEmpty()){
            Covek pom = licni.dequeue();
            if(pom.pasos) pasos.enqueue(pom);
            else if(pom.vozacka) vozacka.enqueue(pom);
            else System.out.println(pom.name);
        }

        while (!pasos.isEmpty()){
            Covek pom = pasos.dequeue();
            if(pom.vozacka) vozacka.enqueue(pom);
            else System.out.println(pom.name);
        }

        while (!vozacka.isEmpty()){
            System.out.println(vozacka.dequeue().name);
        }
    }
}
